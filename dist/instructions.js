"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JGE_REG = exports.JLE_REG = exports.JGT_REG = exports.JGT_LIT = exports.JGE_LIT = exports.JLT_REG = exports.JLT_LIT = exports.JLE_LIT = exports.JEQ_REG = exports.JEQ_LIT = exports.JNE_REG = exports.NOT = exports.XOR_REG_REG = exports.XOR_REG_LIT = exports.OR_REG_REG = exports.OR_REG_LIT = exports.AND_REG_REG = exports.AND_REG_LIT = exports.RSF_REG_REG = exports.RSF_REG_LIT = exports.LSF_REG_REG = exports.LSF_REG_LIT = exports.MUL_REG_REG = exports.MUL_LIT_REG = exports.DEC_REG = exports.INC_REG = exports.SUB_REG_REG = exports.SUB_REG_LIT = exports.SUB_LIT_REG = exports.ADD_LIT_REG = exports.MOV_REG_PTR_REG = exports.MOV_LIT_OFF_REG = exports.MOV_LIT_MEM = exports.HLT = exports.RET = exports.CAL_REG = exports.CAL_LIT = exports.POP = exports.PSH_REG = exports.PSH_LIT = exports.JMP_NOT_EQ = exports.ADD_REG_REG = exports.MOV_REG_REG = exports.MOV_REG_MEM = exports.MOV_MEM_REG = exports.MOV_LIT_REG = void 0;
const MOV_LIT_REG = 0x10; // Move literal to register
exports.MOV_LIT_REG = MOV_LIT_REG;
const MOV_REG_REG = 0x11; // Move register to register
exports.MOV_REG_REG = MOV_REG_REG;
const MOV_REG_MEM = 0x12; // Move register to memory
exports.MOV_REG_MEM = MOV_REG_MEM;
const MOV_MEM_REG = 0x13; // Move memory to register
exports.MOV_MEM_REG = MOV_MEM_REG;
const MOV_LIT_MEM = 0x20; // Move literal to memory
exports.MOV_LIT_MEM = MOV_LIT_MEM;
const MOV_REG_PTR_REG = 0x21; // Move register pointer to register
exports.MOV_REG_PTR_REG = MOV_REG_PTR_REG;
const MOV_LIT_OFF_REG = 0x22; // Move a literal address + a register to a register
exports.MOV_LIT_OFF_REG = MOV_LIT_OFF_REG;
const ADD_REG_REG = 0x14; // Move memory to register
exports.ADD_REG_REG = ADD_REG_REG;
const ADD_LIT_REG = 0x23; // Add literal to register
exports.ADD_LIT_REG = ADD_LIT_REG;
const SUB_LIT_REG = 0x24;
exports.SUB_LIT_REG = SUB_LIT_REG;
const SUB_REG_LIT = 0x25;
exports.SUB_REG_LIT = SUB_REG_LIT;
const SUB_REG_REG = 0x26;
exports.SUB_REG_REG = SUB_REG_REG;
const INC_REG = 0x27;
exports.INC_REG = INC_REG;
const DEC_REG = 0x28;
exports.DEC_REG = DEC_REG;
const MUL_LIT_REG = 0x29;
exports.MUL_LIT_REG = MUL_LIT_REG;
const MUL_REG_REG = 0x30;
exports.MUL_REG_REG = MUL_REG_REG;
const LSF_REG_LIT = 0x40; // Left shift literal value
exports.LSF_REG_LIT = LSF_REG_LIT;
const LSF_REG_REG = 0x41; // Left shift register value
exports.LSF_REG_REG = LSF_REG_REG;
const RSF_REG_LIT = 0x42;
exports.RSF_REG_LIT = RSF_REG_LIT;
const RSF_REG_REG = 0x43;
exports.RSF_REG_REG = RSF_REG_REG;
const AND_REG_LIT = 0x44;
exports.AND_REG_LIT = AND_REG_LIT;
const AND_REG_REG = 0x45;
exports.AND_REG_REG = AND_REG_REG;
const OR_REG_REG = 0x46;
exports.OR_REG_REG = OR_REG_REG;
const OR_REG_LIT = 0x47;
exports.OR_REG_LIT = OR_REG_LIT;
const XOR_REG_LIT = 0x47;
exports.XOR_REG_LIT = XOR_REG_LIT;
const XOR_REG_REG = 0x48;
exports.XOR_REG_REG = XOR_REG_REG;
const NOT = 0x49;
exports.NOT = NOT;
const JMP_NOT_EQ = 0x15; // Jump if literal not equal
exports.JMP_NOT_EQ = JMP_NOT_EQ;
const JNE_REG = 0x50; // Jump not equal for comparing 2 registers
exports.JNE_REG = JNE_REG;
const JEQ_REG = 0x51; // Jump if equal 
exports.JEQ_REG = JEQ_REG;
const JEQ_LIT = 0x52;
exports.JEQ_LIT = JEQ_LIT;
const JLT_REG = 0x53; // Jump if less than
exports.JLT_REG = JLT_REG;
const JLT_LIT = 0x54;
exports.JLT_LIT = JLT_LIT;
const JGT_REG = 0x55; // Jump if greater than
exports.JGT_REG = JGT_REG;
const JGT_LIT = 0x56;
exports.JGT_LIT = JGT_LIT;
const JLE_REG = 0x57; // Jump if less than or equal to 
exports.JLE_REG = JLE_REG;
const JLE_LIT = 0x58;
exports.JLE_LIT = JLE_LIT;
const JGE_REG = 0x59; // Jump if less than or equal to 
exports.JGE_REG = JGE_REG;
const JGE_LIT = 0x5A;
exports.JGE_LIT = JGE_LIT;
const PSH_LIT = 0x16; // Push a literal value onto the stack
exports.PSH_LIT = PSH_LIT;
const PSH_REG = 0x17; // Push a register value onto the stack
exports.PSH_REG = PSH_REG;
const POP = 0x18; // Pop register from stack
exports.POP = POP;
const CAL_LIT = 0x5E; // Call to literal to get subroutine address
exports.CAL_LIT = CAL_LIT;
const CAL_REG = 0x5F; // get subroutine address from a register
exports.CAL_REG = CAL_REG;
const RET = 0x60; // Return from subroutine
exports.RET = RET;
const HLT = 0xFF;
exports.HLT = HLT;
